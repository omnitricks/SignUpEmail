const express = require('express');
const apiController = require('../controller/api_controller');
const router = express.Router(); // .Router() is a function from express.

//TO DECLARE A ROUTER, YOU HAVE TO INDICATE THE HTTP METHOD (POST, GET, PUT, OR PATCH). THEN
//THE FIRST PARAMETER WILL BE THE ENDPOINT. NOW, IF YOU ARE FEELING CONFUSED, OR LOST IN LIFE,
//OR WONDERING WHAT THE HECK IS AN ENDPOINT, REFER FROM THE NOTE ON THE PPT FOUND ON MODULE 5 LEC: INTRODUCTION TO SERVER-SIDE THEN COME BACK HERE.

//AFTER READING THE NOTE, I ASSUMED THAT YOU ARE NO LONGER FEELING LOST. THE SECOND PARAMETER SHOULD
//BE THE CONTROLLER THAT WILL BE EXECUTED AFTER A CLIENT MAKES A REQUEST FROM THE ENDPOINT.
router.post('/insert', apiController.insertData);
router.put('/update', apiController.updateById);
router.get('/all', apiController.getAllData);
router.get('/search', apiController.getDataByCol);
router.delete('/delete', apiController.deleteByCol);
router.delete('/clear', apiController.clearData);


module.exports = router; // NOW ALL OUR CODES LISTED ABOVE WILL NOT WORK UNLESS WE INCLUDE
//THIS PIECE OF CODE.

//ALSO, NOTE THAT ALL ROUTES DECLARED IN A JS FILE MUST BE IN THE SAME MODULE.
//SO IF YOU HAVE ROUTES FROM FOR EXAMPLE.. A LOGIN MODULE, OR A PRODUCTS MODULE THEN USE A SEPARATE JS FILE.
//IT IS NOT A GOOD PRACTICE TO JUST WRITE ALL THE ROUTERS YOU CAN FIND HERE AND THEN YOU'LL ASK FOR HELP ON DEBUGGING YOUR CODE
//BY SEPARATING THEM BY MODULE, YOU'LL BE ABLE TO HELP YOURSELF AND YOUR TEAMMATE FIND OUT WHAT WENT WRONG REAAAAALLY FAST.
//JUST.
//DO.
//IT.